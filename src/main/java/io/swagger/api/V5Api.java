/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.56).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import jakarta.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-05-23T10:15:39.378212833Z[GMT]")
@Validated
public interface V5Api {

    @Operation(summary = "Fetch user", description = "Fetch user", security = {
        @SecurityRequirement(name = "staffToken")    }, tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserDetails.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid status value", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v5/user/{userid}",
        produces = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.GET)
    ResponseEntity<Object> findUserById(@Parameter(in = ParameterIn.PATH, description = "unique id assigned for an user", required=true, schema=@Schema()) @PathVariable("userid") String userid,HttpServletRequest request
);


    @Operation(summary = "Logs user into the system", description = "", security = {
        @SecurityRequirement(name = "BasicAuth")    }, tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LoginSuccessResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid username/password supplied") })
    @RequestMapping(value = "/v5/user/login",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Object> loginUser(@Parameter(in = ParameterIn.DEFAULT, description = "User login credentials", required=true, schema=@Schema()) @Valid @RequestBody UserLoginBody body,HttpServletRequest request
);


    @Operation(summary = "Logs out the session for the specified user", description = "", security = {
            @SecurityRequirement(name = "adminToken"),
            @SecurityRequirement(name = "staffToken") }, tags = { "user" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation") })
    @RequestMapping(value = "/v5/user/logout/{userId}",
            method = RequestMethod.POST)
    ResponseEntity<Object> logoutUser(@PathVariable String userId,HttpServletRequest request);



    @Operation(summary = "sell inventory from store", description = "sell inventory from store", security = {
        @SecurityRequirement(name = "staffToken")    }, tags={ "sellInventory" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v5/sell/inventory",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<Object> sellInventory(@Parameter(in = ParameterIn.DEFAULT, description = "sell inventory from store", required=true, schema=@Schema()) @Valid @RequestBody SellItempayload body, HttpServletRequest request
);

}

